系统架构
	单体：开发简单，但是后期维护困难且难于扩展
	垂直应用：系统分开 提高了单点容错 但是系统之间无法相互调用，且有代码重复
	分布式：系统分开，公共代码也抽取出来做各个服务，缺点，调用关系复杂
	SOA：增加了服务治理中心帮我们维护复杂的调用关系 缺点可能因为一个服务出问题导致其它的问题（服务拆分不彻底） 流行的有Dubbo
	微服务：服务的原子化拆分，拆到最小为止，缺点技术成本高（容错、分布式事务）
服务治理
	注册中心：服务注册、发现、剔除
服务调用
	restful  通信协议：http 性能：略低 灵活度：高 应用：微服务架构
	rpc       通信协议：tcp   性能：较高 灵活度：低 应用：SOA架构
服务网关
	统一的路口，鉴权、限流

服务容错
	预防雪崩效应： 流量控制预防上游压垮自己 熔断降级预防下游服务拖垮自己 系统负载保护防止外界影响
链路追踪
	你的请求走到哪，记录到哪，通过链路追踪发现问题



	


