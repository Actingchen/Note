名词解释：
InnoDB聚集索引的叶子节点存储行记录，因此， InnoDB必须要有，且只有一个聚集索引：

（1）如果表定义了PK，则PK就是聚集索引；

（2）如果表没有定义PK，则第一个not NULL unique列是聚集索引；

（3）否则，InnoDB会创建一个隐藏的row-id作为聚集索引；

画外音：所以PK查询非常快，直接定位行记录。

InnoDB普通索引的叶子节点存储主键值。

画外音：注意，不是存储行记录头指针，MyISAM的索引叶子节点存储记录指针。


# mysql的limit限制和优化
限制：
当行数数据量很大的表，进行分页时性能很差
limit10000,20的意思扫描满足条件的10020行，扔掉前面的10000行，返回最后的20行，问题就在这里。
   比如LIMIT 451350 , 30 扫描了45万多行，怪不得慢的都堵死了。

select 


优化：
通过主键索引优化
SELECT * FROM cps_user_order_detail d WHERE d.id > #{maxId} AND d.order_time>'2020-8-5 00:00:00' ORDER BY d.order_time desc LIMIT 6;


如上代码所示，同样也是分页，但是有个maxId的限制条件，这个是什么意思呢，maxId就是上一页中的最大主键Id。
所以采用此方式的前提：
1）主键必须自增不能是UUID并且前端除了传基本分页参数pageNo,pageSize外，还必须把每次上一页的最大Id带过来，
2）该方式不支持随机跳页，也就是说只能上下翻页。如下图所示是某知名电商中的实际页面。

不能说到MySQL优化就是建索引，调整SQL（实际上在真实开发中这两种优化方案的成效微乎其微）。
毕竟MySQL优化那么牛X的话，就不会有那么多中间件产生了。
当然，可能有人会有疑问，说可以分库分表，然后基于用户ID进行hash选择对应的库表
（这样是为了保证统一用户的订单全部入到一张表里）。这么想没问题的，事实上这是电商中的第一道方案。

# 什么是分库分表？
当单表的数据量达到1000W或100G以后，由于查询维度较多，即使添加从库，优化索引，做很多操作时性能还是下降严重。
这时候可以使用分库分表
将数据分散在不同的数据库中，使得单一数据库的数据量变小来缓解单一数据库的性能问题，从而达到提升数据库性能的目的。
情况分为：
垂直分表（将一个表按照字段分为多表，每个表里面都存储其中一部分字段，按热门字段和冷门字段分表）、
垂直分库（不同服务器同库相同代码）、
水平分库（把同一个表的数据按一定规则拆到不同的数据库中，每个库可以放在不同的服务器上。）、
水平分表（在同一个数据库内，把同一个表的数据按一定的规则拆到多个表中。（对数据行拆分，不影响表结构）

一般来说，在系统设计阶段就应该根据业务耦合松紧来确定垂直分库，垂直分表方案，
在数据量及访问压力不是特别大的情况下，首先考虑缓存，读写分离，索引技术等方案，若数据量极大，且持续增长，
再考虑水平分库水平分表方案。